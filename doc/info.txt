*info.txt*   Read and browse Info files in Vim

                                                                    *info.vim*
                   _        __            _           ~
                  (_)_ __  / _| _____   _(_)_ __ ___  ~
                  | | '_ \| |_ / _ \ \ / / | '_ ` _ \ ~
                  | | | | |  _| (_) \ V /| | | | | | |~
                  |_|_| |_|_|  \___(_)_/ |_|_| |_| |_|~


Version: 0.5.0
Author: Alejandro "HiPhish" Sanchez
License: MIT License



==============================================================================
TABLE OF CONTENTS                                              *info-contents*

    0. Tutorial ......................................... |info-tutorial|
    1. Introduction ..................................... |info-introduction|
    2. Setup and Configuration .......................... |info-configuration|
    3. Variables ........................................ |info-variables|
    4. Key mappings ..................................... |info-mappings|
    5. Commands ......................................... |info-commands|
    6. API .............................................. |info-api|
       6.1. References .................................. |info-reference|
       6.2. Context ..................................... |info-context|
       6.3. URI scheme .................................. |info-uri|
       6.4. Info functions .............................. |info-functions|



==============================================================================
TUTORIAL                                                       *info-tutorial*

Try out  the interactive  tutorial,  straight up  in Info itself!  Execute the
following command:
>
    :Info info.vim
<
You can use a modifier like `:vertical` or `:tab` with the command.



==============================================================================
INTRODUCTION                                               *info-introduction*

*Info.vim* provides basic file type support for Info files,  as well  as an Info
document browser. You can open any Info file and browse its nodes as you could
in the standalone command-line program or Emacs's Info mode.

You can  read  the  Info  document  for  a  topic  like `bash` by executing  the
`:Info` command:
>
    :Info bash
<
An alternative way  of loading an  Info document  is to provide an |info-uri| as
the file name:
>
    :edit info://bash
<
You can use your  regular Vim motions to  navigate the buffer,  but since Info
documents can get very  large you will want to use node-based navigation.  See
the |info-functions| section for an overview.



==============================================================================
CONFIGURATION                                             *info-configuration*

Info is installed like any other Vim plugin.  After installing you can set the
Info binary  for processing  Info files via  the |g:infoprg| variable.  You need
at least GNU Info version 1.6.

You can  use |info-commands| for navigation,  but if you  want more  comfortable
controls similar to standalone Info you should look into the |info-mappings|.



==============================================================================
VARIABLES                                                     *info-variables*

g:infoprg                                                          *g:infoprg*
t:infoprg                                                          *t:infoprg*
b:infoprg                                                          *b:infoprg*

Default: 'info'~

    Name or path to the standalone GNU Info program in increasing order of
    precedence; set one of these variables to override your system's default.
    You need at least version 6.4 of GNU Info.


------------------------------------------------------------------------------
g:Infofallback                                                *g:Infofallback*
Default: {topic, mods -> ...}~

    A fallback function for the |:Info| command which will be called if the
    topic could not be found. It takes two arguments and returns nothing. The
    first argument is the first argument to the |:Info| command and the second
    argument is the |<mods>| in quoted form (`<q-mods>`) of the command.

    The default fallback executes |:Man| on the topic to try to open a man
    page. This is similar to how standalone Info behaves. In Vim as a side
    effect `runtime ftplugin/man.vim` will be executed.

    If you wish to disable any fallback entirely you can |:unlet| this
    variable.



==============================================================================
KEY MAPPINGS                                                   *info-mappings*

g?                                                                   *info-g?*

    Print a quick overview of the commands.


K                                                                     *info-K*
CTRL-]                                                           *info-CTRL-]*

    Follow the reference under the cursor. Works for cross-references and menu
    items.


------------------------------------------------------------------------------
<Plug>(InfoUp)                                                *<Plug>(InfoUp)*

    Go to the parent node. See also `:InfoUp`.


<Plug>(InfoNext)                                            *<Plug>(InfoNext)*

    Go to the next node. See also `:InfoNext`.


<Plug>(InfoPrev)                                            *<Plug>(InfoPrev)*

    Go to the previous node. See also `:InfoPrev`.


<Plug>(InfoMenu)                                            *<Plug>(InfoMenu)*

    Display a menu prompt, similar to standalone Info's `m`. See also `:Menu`.

    If a [count] is provided jump to that entry without displaying a prompt.


<Plug>(InfoFollow)                                        *<Plug>(InfoFollow)*

    Display a cross-reference  following prompt,  similar to standalone Info's
    `f`.  See also `:Follow`.  If no argument  is given the first cross-reference
    is followed.

    If a [count] is provided follow the reference without displaying a prompt.


<Plug>(InfoGoto)                                            *<Plug>(InfoGoto)*

    Display a node prompt, similar to standalone Info's `g`. See also `:GotoNode`.



==============================================================================
COMMANDS                                                       *info-commands*

:Info {file} [{node}]                                                  *:Info*

    Open the {file} document  in an Info buffer.  `:Info` accepts command |<mods>| 
    such as `:vertical` or `:topleft`. See also |info-uri|.

    If an optional  {node} argument is  given the document  will jump to  that
    node. Keep in mind that spaces have to be escaped:
>
        " Wrong
        :Info bash 'What is Bash?'
        " Correct
        :Info bash What\ is\ Bash?
<

------------------------------------------------------------------------------
:InfoUp                                                         *info-:InfoUp*

    Go to the parent node of the current node.


:InfoNext                                                     *info-:InfoNext*

    Go to the next node of the current node.


:InfoPrev                                                     *info-:InfoPrev*

    Go to the previous node of the current node.


------------------------------------------------------------------------------
:Menu [{entry}]                                                   *info-:Menu*

    With no argument  open the location  list populated with  the menu entries
    for the  current node.  With an argument  jump to that node.  The argument
    does not have to be a perfect match, it only needs to  match at the head.


------------------------------------------------------------------------------
:Follow [{xRef}]                                                *info-:Follow*

    Follow the given  cross-reference.  Without argument  the location list is
    populated with all cross references in the current node. The argument does
    not have to be a perfect mtach, it only needs to match at the head.


------------------------------------------------------------------------------
:GotoNode {node}                                              *info-:GotoNode*

    Go to {node} in the current file.



==============================================================================
API                                                                 *info-api*

Info.vim exposes an API so that other plugins can make use of its features.
The API defined a reference type (|info-reference|), a URI scheme (|info-uri|)
and a number of functions inside the `info#` namespace.

Some functions accept a `context` argument, this is the Info context which is
usually stored inside the variable |b:info|. By passing the context explicitly
we can use the API without having to be inside the Info buffer.


------------------------------------------------------------------------------
Info references                                               *info-reference*

Reference objects are the fundamental file type in Info,  they describe in Vim
terms a link  to another Info item,  such as a file or a node.  References are
dictionaries with some or all of the following fields:

    {file}  Info file, not necessarily a physical file
    {node}  Node inside a given file
    {line}  Line number inside a node, counting the node header
    {name}  A human-readable  name of the node,  this is what must be given to
            menu- and cross reference commands

If an entry is  missing there will either  be a default value used  (e.g. line
number 1),  or the  value will  be deduced  from context  (e.g.  if {file}  is
missing use the current file),  or it is an actual error (e.g. menu references
without {name}).


------------------------------------------------------------------------------
b:info                                                          *info-context*
                                                                      *b:info*
                                               *b:info['File']* *b:info['Node']*
                                      *b:info['Up']* *b:info[Next]* *b:info[Prev]*

Dictionary describing a number of properties of the current node. Use this for
scripting. Most of it is reflecting the node header:

    b:info['File']~
	Name of the Info file (document).
    b:info['Node']~
	Name of the current node.

The following entries are |info-reference| dictionaries:

    b:info['Up']~
	Reference to the parent node.
    b:info['Next']~
	Reference to the next node.
    b:info['Prev']~
	Reference to the previous node.

Not all of these keys have to be present in a node. There is also a number of
extra keys which warrant a more detailed explanation further below.


b:info['Menu']                                                *b:info['Menu']*

    A list of menu item entries, each entry is an |info-reference| dictionary.

    Note  The menu is built lazily, it will not exists until executing a menu-
          related command.


b:info['XRefs']                                              *b:info['XRefs']*

    A  list  of  cross-reference  entries,  each  entry  is an  |info-reference|
    dictionary.


------------------------------------------------------------------------------
Info URI                                                            *info-uri*

If an editor  with an Info  URI is edited  the document from  the URI  will be
loaded into the  buffer as if it was  opened with `:Info`.  This would allow you
to open a new window and execute a command like one of the following:
>
    :edit info:bash
    :edit info:bash.info#What%20is%20Bash%3f
    :edit info:bash.info?line=3&column=7#What%20is%20Bash%3f
<
and have the manual for  the Bourne Again Shell loaded into the buffer.  There
is absolutely no difference between an Info  buffer loaded like this or by the
use of `:Info`.

A valid URI follows the (unofficial) syntax exemplified in the Texinfo manual,
with the addition  of a query part;  see `info:texinfo.info#Info%20Files`.  Here
is how Info.vim implements the URI syntax:

    Scheme~
        Always `info`
    Authority~
	None (will add support for one later)
    Path~
	The name of the Info file
    Query~
	Instructions for Vim (optional):
	    `line`    Line number to place the cursor on
	    `column`  Column number to place the cursor on
    Fragment~
	Node within the info file (optional)


------------------------------------------------------------------------------
Info functions                                                *info-functions*

           
info#prog()                                                      *info#prog()*

    Returns the name of the standalone Info binary, respecting |g:infoprg|,
    |t:infoprg| and |b:infoprg|


------------------------------------------------------------------------------
Info URI functions                                                  *info#uri*

                                                            
info#uri#encode({reference}, {context})                      *info#uri#encode*

    Encode an |info-reference| into a URI. The |info-context| is needed to
    fill in information which might by implicitly in the reference, such as
    the name of the Info file.


info#uri#decode({uri})                                       *info#uri#decode*

    Decode an |info-uri| into an |info-reference|.


info#uri#exescape({uri})

    Escape an |info-uri| such that it can be used within an ex-command. A
    valid URI may contain a number of characters which have special meaning in
    an ex-command, and this function escapes them.


------------------------------------------------------------------------------
Info reference functions                                      *info#reference*


info#reference#decode({string}, {context})             *info#reference#decode*

    Decodes a reference string as found within an Info file into an
    |info-reference| object.


==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
