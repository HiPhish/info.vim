*info.txt*   Read and browse info files in Vim

                                                                    *info.vim*
                   _        __            _           ~
                  (_)_ __  / _| _____   _(_)_ __ ___  ~
                  | | '_ \| |_ / _ \ \ / / | '_ ` _ \ ~
                  | | | | |  _| (_) \ V /| | | | | | |~
                  |_|_| |_|_|  \___(_)_/ |_|_| |_| |_|~


Version: 0.1.0
Author: Alejandro "HiPhish" Sanchez
License: MIT License


==============================================================================
TABLE OF CONTENTS                                              *info-contents*

    1. Introduction ..................................... |info-introduction|
    2. Basic configuration .............................. |info-configuration|
    3. Key mappings ..................................... |info-keymaps|
    4. Commands ......................................... |info-commands|
    5. Functions ........................................ |info-functions|
    6. Advanced ......................................... |info-advanced|


==============================================================================
INTRODUCTION                                               *info-introduction*

*info.vim* provides basic  filetype support for info files,  as well  as an info
document browser. You can open any info file and browse its nodes as you could
in the standalone command-line program or Emacs's info mode.

Note: info.vim is still very early work; it is feature-complete but you should
      consider it to be "wet paint" at this point.

You can read the info document for a topic like 'bash' by executing |:Info|:
>
    :Info bash
<
An alternative way  of loading an info document  is to give an |info-uri| as the
file name:
>
    :edit info://bash
<
You can use your  regular Vim motions to  navigate the buffer,  but since info
documents can get very  large you will want to use node-based navigation.  Use
the |:Toc| command to display a table of contents in the location list.  Use the
|:Node| command to navigate over individual nodes.

Note: These commands only work from within info buffers and will shadow global
      commands. If you were to have for instance a Node.js plugin that defines
      a global ':Node' command you would not be able to call it from within an
      info buffer.



==============================================================================
CONFIGURATION                                             *info-configuration*

Currently there is nothing to configure.


==============================================================================
KEY MAPPINGS                                                    *info-keymaps*

g?                                                                   *info-g?*

    Print a quick overview of the commands.


==============================================================================
COMMANDS                                                       *info-commands*

:Info {topic} [{node}]                                                 *:Info*

    Open  the  {topic}  document  in  an  info buffer.  |:Info| accepts  command
    |<mods>| such as |:vertical| or |:topleft|. See also |info-uri|.

    If an optional {node} argument is given the document will jump to that
    node. Keep in mind that spaces have to be escaped:
>
        " Wrong
        :Info bash 'What is Bash?'
        " Correct
        :Info bash What\ is\ Bash?
<

:Node [{node}]                                                         *:Node*
:Node -next
:Node -previous
:Node -up

    Jump to the {node} in this info buffer. The command only works from inside
    an info buffer. If no argument is given the title of the current node will
    be printed.

    When passing '-next',  '-previous' or  '-up' in place  of the argument the
    buffer will jump to that node relative to the current node.


:Toc                                                                    *:Toc*

    Open the table of contents  of this info buffer in the location list.  The
    command only works from inside an info buffer.


==============================================================================
FUNCTIONS                                                     *info-functions*

info#info({mods}, {topic}[, {node}])                             *info#info()*

    Function equivalent  to |:Info| . The first  argument is  the |<mods>|  of the
    command, the second one the topic  to look up and the third (optional) one
    is the node to jump to.


info#node({node})                                                *info#node()*

    Function equivalent  to |:Node|.  The {node}  is the  name of  the node as a
    string. If {node} is the empty string the name of the current node will be
    echoed.


info#toc({node})                                                  *info#toc()*

    Function equivalent to |:Toc|.


==============================================================================
ADVANCED                                                       *info-advanced*

                                                                    *info-uri*
If an editor  with an info  URI is edited  the document from  the URI  will be
loaded into the  buffer as if it was  opened with |:Info|.  This would allow you
to open a new window and execute
>
    :edit info://bash
<
and have the manual for  the Bourne Again Shell loaded into the buffer.  There
is absolutely no difference between an info buffer loaded like this and by the
use of |:Info|.

It is possible to specify the node as a fragment following the host of the URI
>
    :edit info://bash\#What is Bash?
<

==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
