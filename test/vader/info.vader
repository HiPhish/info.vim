#######################
# The ':Info' command #
#######################

# We'll use the tutorial as a general sample file because we don't want to rely
# on what is installed on the user's machine.

Before (Store old info binary so it can be restored):
  let g:infoprg = 'test/bin/info.sh'
  silent! unlet g:Infofallback

After (Restore the original info binary):
  unlet g:infoprg


Execute (No arguments):
  silent Info

Then (Load up the 'dir' node):
  AssertEqual 'info:dir#Top', expand('%')
  quit


Execute (Top node is implied):
  silent Info test

Then:
  AssertEqual 'info:test#Top', expand('%')
  quit


Execute (File and node specified):
  silent Info test Foo

Then:
  AssertEqual 'info:test#Foo', expand('%')
  quit


Execute (Existence of the 'b:info' variable and keys):
  silent Info test

Then:
  Assert exists('b:info')
  Assert exists('b:info[''File'']')
  Assert exists('b:info[''Node'']')
  Assert exists('b:info[''Next'']')
  Assert exists('b:info[''Prev'']')
  Assert exists('b:info[''Up'']')
  quit

Execute (Values of the 'b:info' dictionary):
  silent Info test

Then:
  AssertEqual 'test', b:info['File']
  AssertEqual  'Top', b:info['Node']

  AssertEqual {'Name': 'Foo', 'File': 'test', 'Node':   'Foo'}, b:info['Next']
  AssertEqual {'Name': 'Bar', 'File': 'test', 'Node':   'Bar'}, b:info['Prev']
  AssertEqual {               'File':  'dir', 'Name': '(dir)'}, b:info[  'Up']
  quit
