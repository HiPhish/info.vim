##############################
# Following cross-references #
##############################


Before (Store old info binary so it can be restored):
  let g:old_infoprg = g:infoprg
  let g:infoprg = 'sh '.substitute(g:vader_file, '\v[^/]+\.vader$', '', '').'mock-info.sh'
  silent! unlet g:Infofallback

After (Restore the original info binary):
  let g:infoprg = g:old_infoprg


Execute (Absence of the 'XRefs' key):
  silent Info test

Then:
  Assert !exists('b:info[''XRefs'']')


Execute (Existence of the 'Menu' key):
  silent Info test X-Ref

Then:
  Assert exists('b:info[''XRefs'']')
  quit


Execute (Value of the 'XRefs' key):
  silent Info test X-Ref

Then:
  AssertEqual
  \ [{'File': 'test', 'Name': 'Foo Bar', 'Node': 'Foo Bar'},
  \  {'File': 'test', 'Name': 'Foo', 'Node': 'Bar'},
  \  {'File': 'test', 'Name': 'Foo', 'Node': 'Foo'},
  \  {'File': 'test', 'Name': 'Nul', 'Node': 'Nil'}],
  \ b:info['XRefs']
  quit
  

Execute (The ':Follow' command with argument):
  silent Info test X-Ref
  silent Follow Foo Bar

Then:
  AssertEqual 'info:test#Foo%20Bar', expand('%')
  quit


Execute (Following the reference under the cursor):
  silent Info test X-Ref
  call cursor(3, 1)
  normal K

Then:
  AssertEqual 'info:test#Foo', expand('%')
  quit


Execute (Not following non-existing reference under the cursor):
  silent Info test
  normal K

Then (We have stayed in the same node):
  AssertEqual 'info:test#Top', expand('%')
  quit


Execute (Following reference under cursor with line break):
  silent Info test X-Ref
  call cursor(5, 1)
  normal K

Then:
  AssertEqual 'info:test#Foo%20Bar', expand('%')
  quit


Execute (Dead link):
  silent Info test X-Ref
  silent Follow Nul

Then:
  AssertEqual 'info:test#X-Ref', expand('%')
  quit
